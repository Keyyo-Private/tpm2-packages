--- a/src/lib/tpm2_rc.h
+++ b/src/lib/tpm2_rc.h
@@ -70,7 +70,7 @@
  * - A 6 bit error code
  */
 static inline bool
-tpm2_rc_is_format_zero (TPM_RC response_code)
+tpm2_rc_is_format_zero (TPM2_RC response_code)
 {
     if (IS_BIT_CLEAR (response_code, 7))
         return true;
@@ -84,7 +84,7 @@ tpm2_rc_is_format_zero (TPM_RC response_
  *   identifier in bits [10:08]
  */
 static inline int
-tpm2_rc_is_format_one (TPM_RC response_code)
+tpm2_rc_is_format_one (TPM2_RC response_code)
 {
     if (IS_BIT_SET (response_code, 7))
         return true;
@@ -95,7 +95,7 @@ tpm2_rc_is_format_one (TPM_RC response_c
  * the 2.0 format.
  */
 static inline bool
-tpm2_rc_is_tpm2 (TPM_RC response_code)
+tpm2_rc_is_tpm2 (TPM2_RC response_code)
 {
     /* if bit 7 & 8 are both 0, TPM_RC is 1.2 format */
     if (IS_BIT_CLEAR (response_code, 7) && IS_BIT_CLEAR (response_code, 8))
@@ -104,7 +104,7 @@ tpm2_rc_is_tpm2 (TPM_RC response_code)
         return true;
 }
 static inline bool
-tpm2_rc_is_tpm12 (TPM_RC response_code)
+tpm2_rc_is_tpm12 (TPM2_RC response_code)
 {
     if (!tpm2_rc_is_tpm2 (response_code))
         return true;
@@ -115,7 +115,7 @@ tpm2_rc_is_tpm12 (TPM_RC response_code)
  * Vendor defined TPM2 response codes have bit 8 and 10 set, and bit 7 clear.
  */
 static inline bool
-tpm2_rc_is_vendor_defined (TPM_RC response_code)
+tpm2_rc_is_vendor_defined (TPM2_RC response_code)
 {
     if (IS_BIT_CLEAR (response_code,  7) &&
         IS_BIT_SET   (response_code,  8) &&
@@ -130,7 +130,7 @@ tpm2_rc_is_vendor_defined (TPM_RC respon
  * Warning codes have bit 8 and 11 set, and bits 7 and 10 clear.
  */
 static inline bool
-tpm2_rc_is_warning_code (TPM_RC response_code)
+tpm2_rc_is_warning_code (TPM2_RC response_code)
 {
     if (IS_BIT_CLEAR (response_code,  7) &&
         IS_BIT_SET   (response_code,  8) &&
@@ -146,7 +146,7 @@ tpm2_rc_is_warning_code (TPM_RC response
  * Error codes have bit 8 set, and bits 7, 10 and 11 clear.
  */
 static inline bool
-tpm2_rc_is_error_code (TPM_RC response_code)
+tpm2_rc_is_error_code (TPM2_RC response_code)
 {
     if (IS_BIT_CLEAR (response_code,  7) &&
         IS_BIT_SET   (response_code,  8) &&
@@ -163,7 +163,7 @@ tpm2_rc_is_error_code (TPM_RC response_c
  * Bit 6 and 7 are set.
  */
 static inline bool
-tpm2_rc_is_error_code_with_parameter (TPM_RC response_code)
+tpm2_rc_is_error_code_with_parameter (TPM2_RC response_code)
 {
     if (IS_BIT_SET (response_code, 6) && IS_BIT_SET (response_code, 7))
         return true;
@@ -175,7 +175,7 @@ tpm2_rc_is_error_code_with_parameter (TP
  * Bit 7 set, bits 6 and 11 clear.
  */
 static inline bool
-tpm2_rc_is_error_code_with_handle (TPM_RC response_code)
+tpm2_rc_is_error_code_with_handle (TPM2_RC response_code)
 {
     if (IS_BIT_CLEAR (response_code,  6) &&
         IS_BIT_SET   (response_code,  7) &&
@@ -191,7 +191,7 @@ tpm2_rc_is_error_code_with_handle (TPM_R
  * Bit 6 clear, bits 7 and 11 set.
  */
 static inline bool
-tpm2_rc_is_error_code_with_session (TPM_RC response_code)
+tpm2_rc_is_error_code_with_session (TPM2_RC response_code)
 {
     if (IS_BIT_CLEAR (response_code,  6) &&
         IS_BIT_SET   (response_code,  7) &&
@@ -207,7 +207,7 @@ tpm2_rc_is_error_code_with_session (TPM_
  * RC.
  */
 static inline UINT32
-tpm2_rc_get_code_7bit (TPM_RC response_code)
+tpm2_rc_get_code_7bit (TPM2_RC response_code)
 {
     return TPM_RC_7BIT_ERROR_MASK & response_code;
 }
@@ -215,7 +215,7 @@ tpm2_rc_get_code_7bit (TPM_RC response_c
  * The 6bit error code is only valid if the RC is a "format one" RC.
  */
 static inline UINT32
-tpm2_rc_get_code_6bit (TPM_RC response_code)
+tpm2_rc_get_code_6bit (TPM2_RC response_code)
 {
     return TPM_RC_6BIT_ERROR_MASK & response_code;
 }
@@ -225,7 +225,7 @@ tpm2_rc_get_code_6bit (TPM_RC response_c
  * tpm2_rc_is_error_code_with_parameters function.
  */
 static inline UINT32
-tpm2_rc_get_parameter_number (TPM_RC response_code)
+tpm2_rc_get_parameter_number (TPM2_RC response_code)
 {
     return TPM_RC_PARAMETER_MASK & response_code;
 }
@@ -234,26 +234,26 @@ tpm2_rc_get_parameter_number (TPM_RC res
  * RC with bits 6 clear.
  */
 static inline UINT32
-tpm2_rc_get_handle_number (TPM_RC response_code)
+tpm2_rc_get_handle_number (TPM2_RC response_code)
 {
     return TPM_RC_HANDLE_MASK & response_code;
 }
 static inline UINT32
-tpm2_rc_get_session_number (TPM_RC response_code)
+tpm2_rc_get_session_number (TPM2_RC response_code)
 {
     return TPM_RC_SESSION_MASK & response_code;
 }
 /* Isolate the error level component of the TPM_RC in bits [23:16] */
 static inline UINT32
-tpm2_rc_get_layer (TPM_RC response_code)
+tpm2_rc_get_layer (TPM2_RC response_code)
 {
-    return TSS2_ERROR_LEVEL_MASK & response_code;
+    return TSS2_RC_LAYER_MASK & response_code;
 }
 /* This function returns true if the error code indicates that it came from a
  * TSS component. False otherwise (which indicates it came from the TPM).
  */
 static inline bool
-tpm2_rc_is_from_tss (TPM_RC response_code)
+tpm2_rc_is_from_tss (TPM2_RC response_code)
 {
     if (tpm2_rc_get_layer (response_code))
         return true;
@@ -268,7 +268,7 @@ tpm2_rc_is_from_tss (TPM_RC response_cod
  * So I'm masking [31:24] as well as the ayer indicator.
  */
 static inline UINT32
-tpm2_rc_get_tss_err_code (TPM_RC response_code)
+tpm2_rc_get_tss_err_code (TPM2_RC response_code)
 {
     return 0X0000ffff & response_code;
 }
